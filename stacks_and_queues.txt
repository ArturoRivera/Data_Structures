Exercises

1. The main difference is the way data is managed. Stacks use a LIFO method
which means the last element to be added on is the first to go out. Queues are
FIFO so they work like a line in a drive thru.

2. The both can add and remove data, although they each have a different order
in which they do that. Developers are able to rank tasks and create an order
of operations.

3. There would be two stacks in order to to implement the two features. One
stack would keep track of any commands and you would be able to pop the last
command when a user presses UNDO. The other stack would keep track of the
commands that were popped from the first stack and keep them until the user
presses REDO. This would pop the command from the second stack in order to
execute the command again.

Programming Questions

1.

function reverseString(str) {
    var newString = "";
    for (var i = str.length - 1; i >= 0; i--) {
        newString += str[i];
    }
    return newString;
}

reverseString("Horses in the back");

2 & 1.

//Creating queue data structure
function Queue() {
  this.elements = [];
}

//Enqueue method that adds element to queue
Queue.prototype.enqueue = function (e) {
   this.elements.push(e);
};

//Dequeue method to remove last element from data structure
Queue.prototype.dequeue = function (e) {
   this.elements.pop(e);
};

//Pops the last element from the queue like a stack would
function popFromQueue(){
    q.dequeue(q.length -1);
}

//Creating new queue
var q = new Queue()

//Loop to add elements to the queue
for (var i = 1; i <= 7; i++) {
    q.enqueue(i);
}

console.log(q.elements);
q.enqueue(8);
console.log(q.elements);
popFromQueue();
console.log(q.elements);
